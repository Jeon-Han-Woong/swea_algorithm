package algorithm_lv2;

import java.util.Scanner;

/* SW Expert Academy LV.2 / Q.1970 - 210112

Q1970 - 쉬운 거스름돈

우리나라 화폐 ‘원’은 금액이 높은 돈을 우선적으로 계산할 때 돈의 개수가 가장 최소가 된다.

S마켓에서 사용하는 돈의 종류는 다음과 같다.
50,000 원
10,000 원
5,000 원
1,000 원
500 원
100 원
50 원
10 원

S마켓에서 손님에게 거슬러 주어야 할 금액 N이 입력되면 돈의 최소 개수로 거슬러 주기 위하여 각 종류의 돈이 몇 개씩 필요한지 출력하라.


[예제]

N이 32850일 경우,
50,000 원 : 0개
10,000 원 : 3개
5,000 원 : 0개
1,000 원 : 2개
500 원 : 1개
100 원 : 3개
50 원 : 1개
10 원 : 0개


[제약 사항]

1. N은 10이상 1,000,000이하의 정수이다. (10 ≤ N ≤ 1,000,000)

2. N의 마지막 자릿수는 항상 0이다. (ex : 32850)


[입력]

가장 첫 줄에는 테스트 케이스의 개수 T가 주어지고, 그 아래로 각 테스트 케이스가 주어진다.

각 테스트 케이스에는 N이 주어진다.

2 
32850
160  

[출력]

각 줄은 '#t'로 시작하고, 다음줄에 각 돈의 종류마다 필요한 개수를 빈칸을 사이에 두고 출력한다.

(t는 테스트 케이스의 번호를 의미하며 1부터 시작한다.)

#1
0 3 0 2 1 3 1 0
#2
0 0 0 0 0 1 1 1

*/

public class Q1970 {
	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);
		
		int tc = sc.nextInt();
		
		for (int i = 0; i < tc; i++) {
			// 금액 입력
			int N = sc.nextInt();
			
			int five0000 = 0; // 50000원
			int one0000 = 0; // 10000원
			int five000 = 0; // 5000원
			int one000 = 0; // 1000원
			int five00 = 0; // 500원
			int one00 = 0; // 100원
			int five0 = 0; // 50원
			int one0 = 0; // 10원
			
			while(N >= 50000) { // N이 50000원이 넘지 않을 때까지 빼고, 개수를 올림. 
				N -= 50000;
				five0000++;
			}
			while(N >= 10000) { // N이 10000원이 넘지 않을 때까지 빼고, 개수를 올림. 
				N -= 10000;
				one0000++;
			}
			while(N >= 5000) { // N이 5000원이 넘지 않을 때까지 빼고, 개수를 올림. 
				N -= 5000;
				five000++;
			}
			while(N >= 1000) { // N이 1000원이 넘지 않을 때까지 빼고, 개수를 올림. 
				N -= 1000;
				one000++;
			}
			while(N >= 500) { // N이 500원이 넘지 않을 때까지 빼고, 개수를 올림. 
				N -= 500;
				five00++;
			}
			while(N >= 100) { // N이 100원이 넘지 않을 때까지 빼고, 개수를 올림. 
				N -= 100;
				one00++;
			}
			while(N >= 50) { // N이 50원이 넘지 않을 때까지 빼고, 개수를 올림. 
				N -= 50;
				five0++;
			}
			while(N >= 10) { // N이 10원이 넘지 않을 때까지 빼고, 개수를 올림. 
				N -= 10;
				one0++;
			}
			
			System.out.println("#" + (tc + 1)); //결과 출력
			System.out.println(five0000 + " " + one0000 + " " + five000 + " " + one000 + " " + five00 + " " + one00 + " " + five0 + " " + one0);
		}
	}
}
